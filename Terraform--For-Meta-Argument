###### For Expression Use

You can consider it as list comprehension python

######################Over Map ###############################
variable "work_with_list" {
    description = "This is to test the count with list"
    type= map(string)
    default={"user-1"= "tim-1"
    "user-2"="tim2"
    "user-3"="tim3"}
  
}

locals {
  my_list_from_set=[for name in keys(var.work_with_list): name]                            ####Defining 
}

resource "aws_iam_user" "user_list_count" {
  count=length(local.my_list_from_set)
  name = local.my_list_from_set[count.index]                                          ####Using local after converting it to list
  path = "/system/"

  tags = {
    tag-key = "tag-value"
  }
}

output "user_created_id" {
  
    value = [for i in aws_iam_user.user_list_count: i.id]
  
}

kunal@kunal-Lenovo-U410:~/Terraform-Study/chapter2$ terraform output 
user_created_id = [
  "user-1",
  "user-2",
  "user-3",
]

##################################Print Map on input and resource output ########################################

variable "work_with_list" {
    description = "This is to test the count with list"
    type= map(string)
    default={"user-1"= "tim-1"
    "user-2"="tim2"
    "user-3"="tim3"}
  
}

locals {
  my_list_from_set=[for name in keys(var.work_with_list): name]
}

resource "aws_iam_user" "user_list_count" {
  count=length(local.my_list_from_set)
  name = local.my_list_from_set[count.index]                  #######Map Key used
  path = "/system/"

  tags = {
    tag-key = "tag-value"
  }
}

output "user_created_id" {
  
    value = {for key,value in aws_iam_user.user_list_count: key => value}                              ###### For expression to create map in the output, This is Map syntax in for expression
  
}

output "user_created_id1" {
  
    value = {for key,value in var.work_with_list: key => value}                                      #####Print the input as map
  
}

#####################################################################################RESULT ##############################
kunal@kunal-Lenovo-U410:~/Terraform-Study/chapter2$ terraform output 
user_created_id = {
  "0" = {                                                                                                  ##############Output is as MAP, prefixed with Index/iteration of the output
    "arn" = "arn:aws:iam::*****************:user/system/user-1"
    "force_destroy" = false
    "id" = "user-1"
    "name" = "user-1"
    "path" = "/system/"
    "permissions_boundary" = ""
    "tags" = tomap({
      "tag-key" = "tag-value"
    })
    "tags_all" = tomap({
      "tag-key" = "tag-value"
    })
    "unique_id" = "AIDAUXHOJDRFUXVJ4CM23"
  }
  "1" = {                                                                                           ##############Output is as MAP, prefixed with Index of the output
    "arn" = "arn:aws:iam::*****************:user/system/user-2"
    "force_destroy" = false
    "id" = "user-2"
    "name" = "user-2"
    "path" = "/system/"
    "permissions_boundary" = ""
    "tags" = tomap({
      "tag-key" = "tag-value"
    })
    "tags_all" = tomap({
      "tag-key" = "tag-value"
    })
    "unique_id" = "AIDAUXHOJDRF6KBROVF7W"
  }
  "2" = {                                                                                     ##############Output is as MAP, prefixed with Index of the output
    "arn" = "arn:aws:iam::*****************:user/system/user-3"
    "force_destroy" = false
    "id" = "user-3"
    "name" = "user-3"
    "path" = "/system/"
    "permissions_boundary" = ""
    "tags" = tomap({
      "tag-key" = "tag-value"
    })
    "tags_all" = tomap({
      "tag-key" = "tag-value"
    })
    "unique_id" = "AIDAUXHOJDRFQZ5WOF2IA"
  }
}
user_created_id1 = {                                                                                                        ####Printing the input
  "user-1" = "tim-1"
  "user-2" = "tim2"
  "user-3" = "tim3"
}
kunal@kunal-Lenovo-U410:~/Terraform-Study/chapter2$ 


#######################################
output "user_created_id" {
  
    value = {for key,value in aws_iam_user.user_list_count: key => value.arn}                                ####Want to get the attribute directly
  
}

###########################################################
Outputs:

user_created_id = {
  "0" = "arn:aws:iam::*****************:user/system/user-1"
  "1" = "arn:aws:iam::*****************:user/system/user-2"
  "2" = "arn:aws:iam::*****************:user/system/user-3"
}
